# Generated by Django 4.2.16 on 2025-05-15 09:16

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contests', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='장르명')),
            ],
            options={
                'verbose_name': '장르',
                'verbose_name_plural': '장르 목록',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='이메일 주소')),
                ('name', models.CharField(max_length=100, verbose_name='이름')),
                ('phone_number', models.CharField(blank=True, max_length=15, verbose_name='전화번호')),
                ('author_status', models.CharField(choices=[('none', '아직 작가 활동은 안 해봤어요'), ('aspiring', '작가를 준비하고 있어요 (지망생)'), ('hobbyist', '취미로 글을 쓰고 있어요'), ('semi_pro', '연재 또는 상업 활동 중이에요'), ('professional', '전업 작가입니다')], help_text='작가님의 글쓰기 경험을 알려주세요', max_length=100, verbose_name='작가 경력')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_pics/', verbose_name='프로필 사진')),
                ('is_social', models.BooleanField(default=False, verbose_name='소셜 가입 여부')),
                ('social_provider', models.CharField(default='kakao', max_length=20, verbose_name='소셜 이름')),
                ('is_profile_completed', models.BooleanField(default=False, verbose_name='프로필 작성 완료 여부')),
                ('genres', models.ManyToManyField(help_text='어떤 장르의 글을 가장 많이 쓰시나요? (최대 3개 선택 가능)', related_name='users', to='users.genre', verbose_name='주력 장르')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('liked_contests', models.ManyToManyField(blank=True, related_name='liked_users', to='contests.contest', verbose_name='찜한 공모전')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '사용자',
                'verbose_name_plural': '사용자 목록',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
